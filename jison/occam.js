/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var occam = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[1,5],$V2=[1,4],$V3=[1,7],$V4=[1,8],$V5=[1,10],$V6=[1,11],$V7=[1,15],$V8=[1,16],$V9=[1,17],$Va=[5,6,7,9,15,17,19,21,23],$Vb=[1,19],$Vc=[1,24],$Vd=[1,23],$Ve=[1,25],$Vf=[1,38],$Vg=[1,39],$Vh=[1,40],$Vi=[1,41],$Vj=[1,42],$Vk=[1,43],$Vl=[5,6,7,9,15,17,19,20,21,23,27,34,35,36,37,38,39,40],$Vm=[2,27],$Vn=[1,51],$Vo=[6,7,9,15,17,19,21,23],$Vp=[7,32,33],$Vq=[7,21,23,32,33];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"process":3,"proc":4,"ENDOFFILE":5,"INT":6,"ID":7,"DECLARED":8,"CHAN":9,"OF":10,"ASSIGN":11,"expr":12,"OUT":13,"input":14,"PAR":15,"proc_block":16,"SEQ":17,"alternation":18,"WHILE":19,"INDENT":20,"DEDENT":21,"proc_list":22,"ALT":23,"alt_list":24,"alternative":25,"guard":26,"AMPERSAND":27,"SKIP":28,"IN":29,"operand":30,"binop":31,"INTEGER":32,"LPAR":33,"RPAR":34,"PLUS":35,"MINUS":36,"TIMES":37,"DIV":38,"AND":39,"OR":40,"$accept":0,"$end":1},
terminals_: {2:"error",5:"ENDOFFILE",6:"INT",7:"ID",8:"DECLARED",9:"CHAN",10:"OF",11:"ASSIGN",13:"OUT",15:"PAR",17:"SEQ",19:"WHILE",20:"INDENT",21:"DEDENT",23:"ALT",27:"AMPERSAND",28:"SKIP",29:"IN",32:"INTEGER",33:"LPAR",34:"RPAR",35:"PLUS",36:"MINUS",37:"TIMES",38:"DIV",39:"AND",40:"OR"},
productions_: [0,[3,2],[4,3],[4,5],[4,3],[4,3],[4,3],[4,1],[4,2],[4,2],[4,1],[4,5],[16,3],[22,1],[22,2],[18,4],[24,1],[24,2],[25,4],[25,1],[26,1],[26,3],[26,3],[14,3],[12,1],[12,3],[30,1],[30,1],[30,3],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log("AST: %j", $$[$0-1]); return $$[$0-1] 
break;
case 2:
 this.$ = ["declare_var", $$[$0-1]] 
break;
case 3:
 this.$ = ["declare_chan", $$[$0-1]] 
break;
case 4:
 this.$ = ["assign_expr", $$[$0-2], $$[$0]] 
break;
case 5:
 this.$ = ["assign_proc", $$[$0-2], $$[$0]] 
break;
case 6:
 this.$ = ["out", $$[$0-2], $$[$0]] 
break;
case 7: case 10: case 19: case 24:
 this.$ = $$[$0] 
break;
case 8:
 this.$ = ["par", $$[$0]] 
break;
case 9:
 this.$ = ["seq", $$[$0]] 
break;
case 11:
 this.$ = ["while", $$[$0-3], $$[$0-1]] 
break;
case 12: case 28:
 this.$ = $$[$0-1] 
break;
case 13:
 this.$ = ["proc_list", $$[$0] ] 
break;
case 14: case 17:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 15:
 this.$ = ["alt", $$[$0-1]] 
break;
case 16:
 this.$ = ["alt_list", $$[$0] ] 
break;
case 18:
 this.$ = ["alternative", $$[$0-3], $$[$0-1]] 
break;
case 20:
 this.$ = ["guard", "TRUE", $$[$0]] 
break;
case 21:
 this.$ = ["guard", $$[$0-2], $$[$0]] 
break;
case 22:
 this.$ = ["guard", $$[$0-2], "SKIP"] 
break;
case 23:
 this.$ = ["in", $$[$0-2], $$[$0]] 
break;
case 25:
 this.$ = [$$[$0-1], $$[$0-2], $$[$0]] 
break;
case 26:
 this.$ = Number(yytext);
break;
case 27:
 this.$ = yytext 
break;
case 29:
 this.$ = "PLUS" 
break;
case 30:
 this.$ = "MINUS" 
break;
case 31:
 this.$ = "TIMES" 
break;
case 32:
 this.$ = "DIV" 
break;
case 33:
 this.$ = "AND" 
break;
case 34:
 this.$ = "OR" 
break;
}
},
table: [{3:1,4:2,6:$V0,7:$V1,9:$V2,14:6,15:$V3,17:$V4,18:9,19:$V5,23:$V6},{1:[3]},{5:[1,12]},{7:[1,13]},{10:[1,14]},{11:$V7,13:$V8,29:$V9},o($Va,[2,7]),{16:18,20:$Vb},{16:20,20:$Vb},o($Va,[2,10]),{7:$Vc,12:21,30:22,32:$Vd,33:$Ve},{20:[1,26]},{1:[2,1]},{8:[1,27]},{6:[1,28]},{4:30,6:$V0,7:[1,31],9:$V2,12:29,14:6,15:$V3,17:$V4,18:9,19:$V5,23:$V6,30:22,32:$Vd,33:$Ve},{7:$Vc,12:32,30:22,32:$Vd,33:$Ve},{7:[1,33]},o($Va,[2,8]),{4:35,6:$V0,7:$V1,9:$V2,14:6,15:$V3,17:$V4,18:9,19:$V5,22:34,23:$V6},o($Va,[2,9]),{20:[1,36],31:37,35:$Vf,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk},o($Vl,[2,24]),o($Vl,[2,26]),o($Vl,$Vm),{7:$Vc,12:44,30:22,32:$Vd,33:$Ve},{7:$Vn,12:50,14:49,18:48,23:$V6,24:45,25:46,26:47,30:22,32:$Vd,33:$Ve},o($Va,[2,2]),{7:[1,52]},o($Va,[2,4],{31:37,35:$Vf,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk}),o($Va,[2,5]),o([5,6,7,9,15,17,19,21,23,35,36,37,38,39,40],$Vm,{11:$V7,13:$V8,29:$V9}),o($Va,[2,6],{31:37,35:$Vf,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk}),o([5,6,7,9,15,17,19,20,21,23],[2,23]),{4:54,6:$V0,7:$V1,9:$V2,14:6,15:$V3,17:$V4,18:9,19:$V5,21:[1,53],23:$V6},o($Vo,[2,13]),{4:55,6:$V0,7:$V1,9:$V2,14:6,15:$V3,17:$V4,18:9,19:$V5,23:$V6},{7:$Vc,30:56,32:$Vd,33:$Ve},o($Vp,[2,29]),o($Vp,[2,30]),o($Vp,[2,31]),o($Vp,[2,32]),o($Vp,[2,33]),o($Vp,[2,34]),{31:37,34:[1,57],35:$Vf,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk},{7:$Vn,12:50,14:49,18:48,21:[1,58],23:$V6,25:59,26:47,30:22,32:$Vd,33:$Ve},o($Vq,[2,16]),{20:[1,60]},o($Vq,[2,19]),{20:[2,20]},{27:[1,61],31:37,35:$Vf,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk},o([27,35,36,37,38,39,40],$Vm,{29:$V9}),{8:[1,62]},o($Va,[2,12]),o($Vo,[2,14]),{21:[1,63]},o($Vl,[2,25]),o($Vl,[2,28]),o([5,6,7,9,15,17,19,21,23,32,33],[2,15]),o($Vq,[2,17]),{4:64,6:$V0,7:$V1,9:$V2,14:6,15:$V3,17:$V4,18:9,19:$V5,23:$V6},{7:[1,67],14:65,28:[1,66]},o($Va,[2,3]),o($Va,[2,11]),{21:[1,68]},{20:[2,21]},{20:[2,22]},{29:$V9},o($Vq,[2,18])],
defaultActions: {12:[2,1],49:[2,20],65:[2,21],66:[2,22]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
            function lex() {
            var token;
            token = tstack.pop() || lexer.lex() || EOF;
            if (typeof token !== 'number') {
                if (token instanceof Array) {
                    tstack = token;
                    token = tstack.pop();
                }
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var errStr = '';
            expected = [];
            for (p in table[state]) {
                if (this.terminals_[p] && p > TERROR) {
                    expected.push('\'' + this.terminals_[p] + '\'');
                }
            }
            if (lexer.showPosition) {
                errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
            } else {
                errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
            }
            this.parseError(errStr, {
                text: lexer.match,
                token: this.terminals_[symbol] || symbol,
                line: lexer.yylineno,
                loc: yyloc,
                expected: expected
            });
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 15;
break;
case 1:return 17;
break;
case 2:return 23;
break;
case 3:return 27;
break;
case 4:return 13;
break;
case 5:return 29;
break;
case 6:return 28;
break;
case 7:return 19;
break;
case 8:return 11;
break;
case 9:return 6;
break;
case 10:return 9;
break;
case 11:return 10
break;
case 12:return 8;
break;
case 13:return 33;
break;
case 14:return 34;
break;
case 15:return 35;
break;
case 16:return 36;
break;
case 17:return 37;
break;
case 18:return 38;
break;
case 19:return 39;
break;
case 20:return 40;
break;
case 21:return 7;
break;
case 22:return 32;
break;
case 23:return "ENDOFFILE";
break;
case 24:
					// remaining DEDENTs implied by EOF, regardless of tabs/spaces
					var tokens = [];
					while (0 < _iemitstack[0]) {
						this.popState();
						tokens.unshift("DEDENT");
						_iemitstack.shift();
					}
					if (tokens.length) return tokens;
				
break;
case 25:/* eat blank lines */
break;
case 26:
					var indentation = yy_.yytext.length - yy_.yytext.search(/\s/) - 1;
					if (indentation > _iemitstack[0]) {
						_iemitstack.unshift(indentation);
						return 20;
					}
				
					var tokens = [];
				
					while (indentation < _iemitstack[0]) {
						this.popState();
						tokens.unshift("DEDENT");
						_iemitstack.shift();
					}
					if (tokens.length) return tokens;
				
break;
case 27:/* ignore all other whitespace */
break;
}
},
rules: [/^(?:PAR\b)/,/^(?:SEQ\b)/,/^(?:ALT\b)/,/^(?:&)/,/^(?:!)/,/^(?:\?)/,/^(?:SKIP\b)/,/^(?:WHILE\b)/,/^(?::=)/,/^(?:INT\b)/,/^(?:CHAN\b)/,/^(?:OF\b)/,/^(?::)/,/^(?:\()/,/^(?:\))/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:AND\b)/,/^(?:OR\b)/,/^(?:([a-zA-Z][a-zA-Z0-9]*))/,/^(?:\d+)/,/^(?:$)/,/^(?:\s*$)/,/^(?:[\n\r]+([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*(?![^\n\r]))/,/^(?:[\n\r]([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])*)/,/^(?:([\t \u00a0\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u3000])+)/],
conditions: {"EXPR":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,25,27],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27],"inclusive":true}}
});
/* initialize the pseudo-token stack with 0 indents */
_iemitstack = [0];;
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = occam;
exports.Parser = occam.Parser;
exports.parse = function () { return occam.parse.apply(occam, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}