@top Program { Process }

Process { Assignment | Input | Output | Skip | Stop | Sequence }
//  | Conditional | Parallel

processList { Process processList | Process }

/// Assignment and values

Assignment { variable ":=" expression }

@precedence { minus @left, negate @right }

expression { operand 
  | @specialize<Name, "~" | "BITNOT" | "NOT" | "SIZE"> operand 
  | operand @specialize<Name, "+" | "*" | "/" | "\\" | "REM" | "PLUS" | "TIMES" | "/\\" | "\\/" | "><" | "BITAND" | "BITOR" | "AND" | "OR" | "=" | "<>" | "<" | ">" | ">=" | "<=" | "AFTER"> operand 
  | operand !minus @specialize<Name, "-" | "MINUS">
  | !negate @specialize<Name, "-" | "MINUS"> operand }
//need to add a lot more operator precedences hopefully it will look less weird then

operand { variable | literal }

variable { Name }

literal { Integer }

/// Input and Output

Input { Channel "?" inputItem }

inputItem { variable }

Output { Channel "!" outputItem }

outputItem { expression }

Channel { Name }

/// Sequencing

Sequence { Seq newline indent processList dedent }

/// Keywords & tokens

Seq { @specialize<Name, "SEQ"> }

Skip { @specialize<Name, "SKIP"> }

Stop { @specialize<Name, "STOP"> }

//Monop { @specialize<Name, "-" | "MINUS" | "~" | "BITNOT" | "NOT" | "SIZE"> }

//Binop { @specialize<Name, "+" | "-" | "*" | "/" | "\\" | "REM" | "PLUS" | "MINUS" | "TIMES" | "/\\" | "\\/" | "><" | "BITAND" | "BITOR" | "AND" | "OR" | "=" | "<>" | "<" | ">" | ">=" | "<=" | "AFTER"> }

@external tokens indentation from "./tokens" { indent, dedent }

@external tokens newlines from "./tokens" { newline }

@tokens {
  Name { @asciiLetter+ }
  Integer { @digit+ }
}